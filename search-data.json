[{"url":"https://lusito.github.io/pixlcam/","content":"PixlCam\n\n\n\n\n\nA set of 2D cameras for games written in TypeScript:\n\nA basic camera you can use for simple stuff\nA screen camera for drawing in screen-space coordinates\nA camera that follows your player smoothly\nAn influenced camera inspired by the camera from Insanely Twisted Shadow Planet.\n\nYou'll get a projection and a model-view matrix ready to use, but there are also getters if your setup can't specify a camera matrix.\nFair Warning\nThe compile target of this library is es2015, so if you want to support older browsers, you'll have to ensure that this module is being transpiled to an older es version during your build-process.\nGet started\n\nRead the documentation\nLook at the example (example/*.ts).\nAsk questions if the above doesn't clarify something good enough.\n\nReport issues\nSomething not working quite as expected? Do you need a feature that has not been implemented yet? Check the issue tracker and add a new one if your problem is not already listed. Please try to provide a detailed description of your problem, including the steps to reproduce it.\nContribute\nAwesome! If you would like to contribute with a new feature or submit a bugfix, fork this repo and send a pull request. Please, make sure all the unit tests are passing before submitting and add new ones in case you introduced new features.\nLicense\nPixlCam is licensed under the zlib/libpng, meaning you\ncan use it free of charge, without strings attached in commercial and non-commercial projects. Credits are appreciated but not mandatory.\n","title":"PixlCam","projectIndex":{"title":"PixlCam","url":"https://lusito.github.io/pixlcam/"}},{"url":"https://lusito.github.io/pixlcam/basic-camera.html","content":"Basic Camera\nAll cameras in this library extend the Camera class.\nMost of the following applies to all camera classes, but some might differ a bit.\nCamera Matrices\nAll cameras provide a projection and a modelView property, which are 4x4 matrices (an array of 16 numbers). These are ready to use on WebGL shaders.\nSetting the Viewport\nIn order to have the correct projection matrix, you'll need to set the viewport size at least once on initialization by calling resize(width, height) on the camera.\nIf your viewport changes, for example on browser resize or orientation change, be sure to call camera.resize when that happens as well!\nPixel Snapping\nAll cameras by default snap to pixels in order to avoid sub-pixel positioning. You can disable this behavior by setting The snapToPixel property on the camera to false.\nZoom Level\nYou can set the zoom level of all cameras except the ScreenCamera. Do this by calling setZoom(value) on the camera. Default is 1.\nPositioning the Camera\nYou can use the moveTo method to set the desired position of the camera.\nSetting Boundaries\nIn some scenarios, you might want to constrain the camera to stay within the specified bounds. For example to not show anything outside the level geometry. You can use setBounds to do that. Use setBounds(null) to remove the boundary.\n","title":"Basic Camera"},{"url":"https://lusito.github.io/pixlcam/following-camera.html","content":"Following Camera\nThe FollowingCamera follows a target smoothly.\nThis camera is still a bit experimental, as the configuration options I created don't work as I planned, but it still has a nice motion. You might want to check out the InfluencedCamera if you are looking for a more polished camera.\nUpdating the Camera\nSince this camera needs to do work each frame, you'll need to call its update method with the time that passed since the last frame.\nPositioning the Camera\nYou can use the moveTo method to set the desired position of the camera. This will not move the camera instantly, so it takes time until it arrives at the destination.\nIf you need to move it instantly, call moveInstantly after calling moveTo.\nOther Options\nThe following properties on the camera object allow changing the behavior of the camera. As said in the beginning, this camera is experimental, so this doesn't behave exactly as you might expect from the names, so play around with them a bit.\n    public maxSpeed = 900;\n    public acceleration = 20;\n    public slowDistance = 100;\n    public lockDistance = 1;\n\n","title":"Following Camera"},{"url":"https://lusito.github.io/pixlcam/screen-camera.html","content":"Screen Camera\nThe ScreenCamera is by far the most simple camera in this library.\nYou essentially only need to make sure you call resize to configure the viewport.\nCalling setZoom or setBounds don't really make sense to use.\nCalling moveTo is not required, as it's centered automatically on resize. It's still allowed though in case you want to implement some kind of screen-shaking effect maybe.\n","title":"Screen Camera"},{"url":"https://lusito.github.io/pixlcam/setup.html","content":"Setup\nThis is the easy part, you already know it:\nInstall With NPM\nnpm i pixlcam\n\nInstall With Yarn\nyarn add pixlcam\n\n","title":"Setup"},{"url":"https://lusito.github.io/pixlcam/influenced-camera.html","content":"Influenced Camera\nThe InfluencedCamera is the most advanced camera of this library and is inspired by the camera from Insanely Twisted Shadow Planet.\nThis camera allows you to:\n\nConfigure a target\n\nA target has a a position, zoom and optionally influence vectors.\nA target influence can, for example, be used to move the camera in the direction the player is moving and/or aiming.\nYou can switch targets to focus on something different, for example a cinematic event or a missile to be controlled for a short time.\n\n\nSet up visual cues in the world, which attract the camera (both in position and zoom)\nConfigure world boundaries.\n\nUpdating the Camera\nSince this camera needs to do work each frame, you'll need to call its update method with the time that passed since the last frame.\nSetting a Camera Target\nA target is the main focus of the camera until something attracts the cameras attention. The target is usually the player, but it can be something else as well. Without a target, the camera won't do anything.\nTo set the target, call setTarget. You only need to call it again if the target changes. Property changes will be automatically detected. When you switch from one target to another, a transition will be performed, so that the camera does not instantly jump to the new target.\nAn InfluencedCameraTarget needs to implement the following properties:\nPosition and Zoom\nThe x and y properties represent the target position in your world. Keep them up to date.\nThe zoom value will be combined with the camera zoom and the cue zoom values to form the final zoom value.\nTarget Influences\nThe influences property is a list of Vector2. For convenience, there's a TargetInfluence class, which handles smoothing for you.\nThink of a target influence as an offset vector relative to the target, attracting the camera.\nExample use-cases:\n\nLooking ahead of the player (use the players velocity vector).\nLooking where the player aims (use the direction vector).\n\nIf you use the TargetInfluence, use its set method to set the newest value and call update every frame to let it do its magic.\nYou can configure the following settings on a TargetInfluence via constructor parameter and also later via the respective public property.\n    /** The maximum length this influence offset can have. */\n    public maxLength: number;\n    /** The factor to multiply the influence offset by (before applying maxLength). Defaults to 1. */\n    public factor: number;\n    /** The percentage amount to move with each update. A value between 0 and 1. */\n    public lerpFactor: number;\n    /** The number of frames to remember to smoothen the camera movement. Defaults to 30. */\n    averageMaxFrames?: number;\n\nAdding and Removing Cues\nIn addition to target influences, which are relative to the target, we also have cues, which are positioned absolutely in the world.\nCues attract the camera away from the target and affect both position and zoom level of the camera. The closer you get to a cue, the more it takes control of the camera.\nTo add a cue, call addCue and to remove it, call removeCue or removeAllCues to remove all cues in one go.\nWhen removing a cue, you can specify a fadeTime. If you do that, the cue will be cloned internally and gradually lose its influence on the camera, so the camera doesn't jump when it's finally removed.\nAn InfluencedCameraCue needs to implement the following properties:\nPosition and Zoom\nThe x and y properties represent the cue position in your world. Keep them up to date.\nThe zoom value will be combined with the camera zoom and the target zoom value to form the final zoom value.\nInner and Outer Radius\nWhen the camera target moves into the outerRadius of a cue, the cue starts attracting the camera. The closer it gets to the innerRadius, the more stronger the influence. Within the innerRadius, the cue has full control and the camera is fixed on the position of the cue.\nIf two (or more) cues overlap, they will all attract the camera.\n","title":"Influenced Camera"}]